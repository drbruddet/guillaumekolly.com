webpackHotUpdate(1,{

/***/ 99:
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _defineProperty2 = __webpack_require__(28);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _getPrototypeOf = __webpack_require__(10);
	
	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);
	
	var _classCallCheck2 = __webpack_require__(11);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(12);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _possibleConstructorReturn2 = __webpack_require__(14);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(13);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _react = __webpack_require__(3);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _css = __webpack_require__(27);
	
	var _css2 = _interopRequireDefault(_css);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var MovingText = function (_React$Component) {
	  (0, _inherits3.default)(MovingText, _React$Component);
	
	  function MovingText(props) {
	    (0, _classCallCheck3.default)(this, MovingText);
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, (MovingText.__proto__ || (0, _getPrototypeOf2.default)(MovingText)).call(this, props));
	
	    _this.init();
	    return _this;
	  }
	
	  (0, _createClass3.default)(MovingText, [{
	    key: 'init',
	    value: function init() {
	      this.state = { mousePos: { x: 0, y: 0 } };
	    }
	  }, {
	    key: 'mouseMove',
	    value: function mouseMove(e) {
	      this.setState({
	        mousePos: {
	          x: e.pageX - window.innerWidth / 2,
	          y: e.pageY - window.innerHeight / 2
	        }
	      });
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          beforetext = _props.beforetext,
	          aftertext = _props.aftertext,
	          movingtext = _props.movingtext,
	          style = _props.style;
	
	
	      var offset = {
	        transform: 'translate3d( ' + this.state.mousePos.x / this.props.style.animation.transform_mouse_pos_x + 'px,\n        ' + this.state.mousePos.y / this.props.style.animation.transform_mouse_pos_y + 'px, 0 )',
	        textShadow: -this.state.mousePos.x / this.props.style.animation.shadow_mouse_pos_x + 'px\n        ' + this.state.mousePos.y / this.props.style.animation.shadow_mouse_pos_y + 'px\n        ' + this.props.style.movingtitlebackground
	      };
	
	      return _react2.default.createElement(
	        'div',
	        { className: style.background,
	          onMouseMove: this.mouseMove.bind(this) },
	        _react2.default.createElement(
	          'h1',
	          { style: { whiteSpace: 'nowrap' }, className: style.fixedtitle },
	          beforetext,
	          _react2.default.createElement(
	            'span',
	            (0, _defineProperty3.default)({ style: { display: 'inline-block',
	                willChange: 'transform' },
	              className: style.movingtitle
	            }, 'style', offset),
	            movingtext
	          ),
	          aftertext
	        )
	      );
	    }
	  }]);
	  return MovingText;
	}(_react2.default.Component);
	
	MovingText.propTypes = {
	  beforetext: _react.PropTypes.string,
	  aftertext: _react.PropTypes.string,
	  movingtext: _react.PropTypes.string.isRequired,
	  style: _react.PropTypes.object
	};
	exports.default = MovingText;
	//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvTW92aW5nVGV4dC5qcyJdLCJuYW1lcyI6WyJNb3ZpbmdUZXh0IiwicHJvcHMiLCJpbml0Iiwic3RhdGUiLCJtb3VzZVBvcyIsIngiLCJ5IiwiZSIsInNldFN0YXRlIiwicGFnZVgiLCJ3aW5kb3ciLCJpbm5lcldpZHRoIiwicGFnZVkiLCJpbm5lckhlaWdodCIsImJlZm9yZXRleHQiLCJhZnRlcnRleHQiLCJtb3Zpbmd0ZXh0Iiwic3R5bGUiLCJvZmZzZXQiLCJ0cmFuc2Zvcm0iLCJhbmltYXRpb24iLCJ0cmFuc2Zvcm1fbW91c2VfcG9zX3giLCJ0cmFuc2Zvcm1fbW91c2VfcG9zX3kiLCJ0ZXh0U2hhZG93Iiwic2hhZG93X21vdXNlX3Bvc194Iiwic2hhZG93X21vdXNlX3Bvc195IiwibW92aW5ndGl0bGViYWNrZ3JvdW5kIiwiYmFja2dyb3VuZCIsIm1vdXNlTW92ZSIsImJpbmQiLCJ3aGl0ZVNwYWNlIiwiZml4ZWR0aXRsZSIsImRpc3BsYXkiLCJ3aWxsQ2hhbmdlIiwibW92aW5ndGl0bGUiLCJDb21wb25lbnQiLCJwcm9wVHlwZXMiLCJzdHJpbmciLCJpc1JlcXVpcmVkIiwib2JqZWN0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7OztBQUNBOzs7Ozs7SUFFcUJBLFU7OztBQVNuQixzQkFBWUMsS0FBWixFQUFtQjtBQUFBOztBQUFBLDhJQUNYQSxLQURXOztBQUVqQixVQUFLQyxJQUFMO0FBRmlCO0FBR2xCOzs7OzJCQUVNO0FBQ0wsV0FBS0MsS0FBTCxHQUFhLEVBQUVDLFVBQVUsRUFBRUMsR0FBRyxDQUFMLEVBQVFDLEdBQUcsQ0FBWCxFQUFaLEVBQWI7QUFDRDs7OzhCQUVTQyxDLEVBQUc7QUFDWCxXQUFLQyxRQUFMLENBQWM7QUFDWkosa0JBQVU7QUFDUkMsYUFBR0UsRUFBRUUsS0FBRixHQUFXQyxPQUFPQyxVQUFQLEdBQW9CLENBRDFCO0FBRVJMLGFBQUdDLEVBQUVLLEtBQUYsR0FBV0YsT0FBT0csV0FBUCxHQUFxQjtBQUYzQjtBQURFLE9BQWQ7QUFNRDs7OzZCQUVRO0FBQUEsbUJBQzhDLEtBQUtaLEtBRG5EO0FBQUEsVUFDQ2EsVUFERCxVQUNDQSxVQUREO0FBQUEsVUFDYUMsU0FEYixVQUNhQSxTQURiO0FBQUEsVUFDd0JDLFVBRHhCLFVBQ3dCQSxVQUR4QjtBQUFBLFVBQ29DQyxLQURwQyxVQUNvQ0EsS0FEcEM7OztBQUdQLFVBQUlDLFNBQVM7QUFDWEMscUNBQTJCLEtBQUtoQixLQUFMLENBQVdDLFFBQVgsQ0FBb0JDLENBQXBCLEdBQXdCLEtBQUtKLEtBQUwsQ0FBV2dCLEtBQVgsQ0FBaUJHLFNBQWpCLENBQTJCQyxxQkFBOUUscUJBQ0ksS0FBS2xCLEtBQUwsQ0FBV0MsUUFBWCxDQUFvQkUsQ0FBcEIsR0FBd0IsS0FBS0wsS0FBTCxDQUFXZ0IsS0FBWCxDQUFpQkcsU0FBakIsQ0FBMkJFLHFCQUR2RCxZQURXO0FBR1hDLG9CQUFlLENBQUUsS0FBS3BCLEtBQUwsQ0FBV0MsUUFBWCxDQUFvQkMsQ0FBdEIsR0FBMEIsS0FBS0osS0FBTCxDQUFXZ0IsS0FBWCxDQUFpQkcsU0FBakIsQ0FBMkJJLGtCQUFwRSxvQkFDSSxLQUFLckIsS0FBTCxDQUFXQyxRQUFYLENBQW9CRSxDQUFwQixHQUF3QixLQUFLTCxLQUFMLENBQVdnQixLQUFYLENBQWlCRyxTQUFqQixDQUEyQkssa0JBRHZELG9CQUVJLEtBQUt4QixLQUFMLENBQVdnQixLQUFYLENBQWlCUztBQUxWLE9BQWI7O0FBUUEsYUFDRTtBQUFBO0FBQUEsVUFBSyxXQUFXVCxNQUFNVSxVQUF0QjtBQUNJLHVCQUFjLEtBQUtDLFNBQUwsQ0FBZUMsSUFBZixDQUFvQixJQUFwQixDQURsQjtBQUVFO0FBQUE7QUFBQSxZQUFJLE9BQU8sRUFBQ0MsWUFBWSxRQUFiLEVBQVgsRUFBbUMsV0FBV2IsTUFBTWMsVUFBcEQ7QUFDR2pCLG9CQURIO0FBR0U7QUFBQTtBQUFBLDRDQUFNLE9BQU8sRUFBQ2tCLFNBQVMsY0FBVjtBQUNMQyw0QkFBWSxXQURQLEVBQWI7QUFFTSx5QkFBV2hCLE1BQU1pQjtBQUZ2Qix3QkFHYWhCLE1BSGI7QUFJR0Y7QUFKSCxXQUhGO0FBVUdEO0FBVkg7QUFGRixPQURGO0FBaUJEOzs7RUF2RHFDLGdCQUFNb0IsUzs7QUFBekJuQyxVLENBRVpvQyxTLEdBQVk7QUFDakJ0QixjQUFZLGlCQUFVdUIsTUFETDtBQUVqQnRCLGFBQVksaUJBQVVzQixNQUZMO0FBR2pCckIsY0FBWSxpQkFBVXFCLE1BQVYsQ0FBaUJDLFVBSFo7QUFJakJyQixTQUFZLGlCQUFVc0I7QUFKTCxDO2tCQUZBdkMsVSIsImZpbGUiOiJNb3ZpbmdUZXh0LmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9ndWlsbGF1bWVrb2xseS9Eb2N1bWVudHMvTmV4dEpTL2d1aWxsYXVtZWtvbGx5LmNvbSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBjc3MgZnJvbSAnbmV4dC9jc3MnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1vdmluZ1RleHQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuXG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgYmVmb3JldGV4dDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBhZnRlcnRleHQ6ICBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIG1vdmluZ3RleHQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICBzdHlsZTogICAgICBQcm9wVHlwZXMub2JqZWN0XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKVxuICAgIHRoaXMuaW5pdCgpXG4gIH1cblxuICBpbml0KCkge1xuICAgIHRoaXMuc3RhdGUgPSB7IG1vdXNlUG9zOiB7IHg6IDAsIHk6IDAgfSB9XG4gIH1cblxuICBtb3VzZU1vdmUoZSkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgbW91c2VQb3M6IHtcbiAgICAgICAgeDogZS5wYWdlWCAtICh3aW5kb3cuaW5uZXJXaWR0aCAvIDIpLFxuICAgICAgICB5OiBlLnBhZ2VZIC0gKHdpbmRvdy5pbm5lckhlaWdodCAvIDIpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGJlZm9yZXRleHQsIGFmdGVydGV4dCwgbW92aW5ndGV4dCwgc3R5bGUgfSA9IHRoaXMucHJvcHNcblxuICAgIGxldCBvZmZzZXQgPSB7XG4gICAgICB0cmFuc2Zvcm06IGB0cmFuc2xhdGUzZCggJHt0aGlzLnN0YXRlLm1vdXNlUG9zLnggLyB0aGlzLnByb3BzLnN0eWxlLmFuaW1hdGlvbi50cmFuc2Zvcm1fbW91c2VfcG9zX3h9cHgsXG4gICAgICAgICR7dGhpcy5zdGF0ZS5tb3VzZVBvcy55IC8gdGhpcy5wcm9wcy5zdHlsZS5hbmltYXRpb24udHJhbnNmb3JtX21vdXNlX3Bvc195fXB4LCAwIClgLFxuICAgICAgdGV4dFNoYWRvdzogYCR7LSB0aGlzLnN0YXRlLm1vdXNlUG9zLnggLyB0aGlzLnByb3BzLnN0eWxlLmFuaW1hdGlvbi5zaGFkb3dfbW91c2VfcG9zX3h9cHhcbiAgICAgICAgJHt0aGlzLnN0YXRlLm1vdXNlUG9zLnkgLyB0aGlzLnByb3BzLnN0eWxlLmFuaW1hdGlvbi5zaGFkb3dfbW91c2VfcG9zX3l9cHhcbiAgICAgICAgJHt0aGlzLnByb3BzLnN0eWxlLm1vdmluZ3RpdGxlYmFja2dyb3VuZH1gXG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZS5iYWNrZ3JvdW5kfVxuICAgICAgICAgIG9uTW91c2VNb3ZlPXsgdGhpcy5tb3VzZU1vdmUuYmluZCh0aGlzKSB9ID5cbiAgICAgICAgPGgxIHN0eWxlPXt7d2hpdGVTcGFjZTogJ25vd3JhcCd9fSBjbGFzc05hbWU9e3N0eWxlLmZpeGVkdGl0bGV9PlxuICAgICAgICAgIHtiZWZvcmV0ZXh0fVxuXG4gICAgICAgICAgPHNwYW4gc3R5bGU9e3tkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICAgICAgICAgICAgICAgIHdpbGxDaGFuZ2U6ICd0cmFuc2Zvcm0nfX1cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e3N0eWxlLm1vdmluZ3RpdGxlfVxuICAgICAgICAgICAgICAgIHN0eWxlPXtvZmZzZXR9PlxuICAgICAgICAgICAge21vdmluZ3RleHR9XG4gICAgICAgICAgPC9zcGFuPlxuXG4gICAgICAgICAge2FmdGVydGV4dH1cbiAgICAgICAgPC9oMT5cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxufVxuIl19

/***/ }

})
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL01vdmluZ1RleHQuanM/MGFjZCJdLCJuYW1lcyI6WyJNb3ZpbmdUZXh0IiwicHJvcHMiLCJpbml0Iiwic3RhdGUiLCJtb3VzZVBvcyIsIngiLCJ5IiwiZSIsInNldFN0YXRlIiwicGFnZVgiLCJ3aW5kb3ciLCJpbm5lcldpZHRoIiwicGFnZVkiLCJpbm5lckhlaWdodCIsImJlZm9yZXRleHQiLCJhZnRlcnRleHQiLCJtb3Zpbmd0ZXh0Iiwic3R5bGUiLCJvZmZzZXQiLCJ0cmFuc2Zvcm0iLCJhbmltYXRpb24iLCJ0cmFuc2Zvcm1fbW91c2VfcG9zX3giLCJ0cmFuc2Zvcm1fbW91c2VfcG9zX3kiLCJ0ZXh0U2hhZG93Iiwic2hhZG93X21vdXNlX3Bvc194Iiwic2hhZG93X21vdXNlX3Bvc195IiwibW92aW5ndGl0bGViYWNrZ3JvdW5kIiwiYmFja2dyb3VuZCIsIm1vdXNlTW92ZSIsImJpbmQiLCJ3aGl0ZVNwYWNlIiwiZml4ZWR0aXRsZSIsImRpc3BsYXkiLCJ3aWxsQ2hhbmdlIiwibW92aW5ndGl0bGUiLCJDb21wb25lbnQiLCJwcm9wVHlwZXMiLCJzdHJpbmciLCJpc1JlcXVpcmVkIiwib2JqZWN0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7OztLQUVxQkEsVTs7O0FBU25CLHVCQUFZQyxLQUFaLEVBQW1CO0FBQUE7O0FBQUEsK0lBQ1hBLEtBRFc7O0FBRWpCLFdBQUtDLElBQUw7QUFGaUI7QUFHbEI7Ozs7NEJBRU07QUFDTCxZQUFLQyxLQUFMLEdBQWEsRUFBRUMsVUFBVSxFQUFFQyxHQUFHLENBQUwsRUFBUUMsR0FBRyxDQUFYLEVBQVosRUFBYjtBQUNEOzs7K0JBRVNDLEMsRUFBRztBQUNYLFlBQUtDLFFBQUwsQ0FBYztBQUNaSixtQkFBVTtBQUNSQyxjQUFHRSxFQUFFRSxLQUFGLEdBQVdDLE9BQU9DLFVBQVAsR0FBb0IsQ0FEMUI7QUFFUkwsY0FBR0MsRUFBRUssS0FBRixHQUFXRixPQUFPRyxXQUFQLEdBQXFCO0FBRjNCO0FBREUsUUFBZDtBQU1EOzs7OEJBRVE7QUFBQSxvQkFDOEMsS0FBS1osS0FEbkQ7QUFBQSxXQUNDYSxVQURELFVBQ0NBLFVBREQ7QUFBQSxXQUNhQyxTQURiLFVBQ2FBLFNBRGI7QUFBQSxXQUN3QkMsVUFEeEIsVUFDd0JBLFVBRHhCO0FBQUEsV0FDb0NDLEtBRHBDLFVBQ29DQSxLQURwQzs7O0FBR1AsV0FBSUMsU0FBUztBQUNYQyxzQ0FBMkIsS0FBS2hCLEtBQUwsQ0FBV0MsUUFBWCxDQUFvQkMsQ0FBcEIsR0FBd0IsS0FBS0osS0FBTCxDQUFXZ0IsS0FBWCxDQUFpQkcsU0FBakIsQ0FBMkJDLHFCQUE5RSxxQkFDSSxLQUFLbEIsS0FBTCxDQUFXQyxRQUFYLENBQW9CRSxDQUFwQixHQUF3QixLQUFLTCxLQUFMLENBQVdnQixLQUFYLENBQWlCRyxTQUFqQixDQUEyQkUscUJBRHZELFlBRFc7QUFHWEMscUJBQWUsQ0FBRSxLQUFLcEIsS0FBTCxDQUFXQyxRQUFYLENBQW9CQyxDQUF0QixHQUEwQixLQUFLSixLQUFMLENBQVdnQixLQUFYLENBQWlCRyxTQUFqQixDQUEyQkksa0JBQXBFLG9CQUNJLEtBQUtyQixLQUFMLENBQVdDLFFBQVgsQ0FBb0JFLENBQXBCLEdBQXdCLEtBQUtMLEtBQUwsQ0FBV2dCLEtBQVgsQ0FBaUJHLFNBQWpCLENBQTJCSyxrQkFEdkQsb0JBRUksS0FBS3hCLEtBQUwsQ0FBV2dCLEtBQVgsQ0FBaUJTO0FBTFYsUUFBYjs7QUFRQSxjQUNFO0FBQUE7QUFBQSxXQUFLLFdBQVdULE1BQU1VLFVBQXRCO0FBQ0ksd0JBQWMsS0FBS0MsU0FBTCxDQUFlQyxJQUFmLENBQW9CLElBQXBCLENBRGxCO0FBRUU7QUFBQTtBQUFBLGFBQUksT0FBTyxFQUFDQyxZQUFZLFFBQWIsRUFBWCxFQUFtQyxXQUFXYixNQUFNYyxVQUFwRDtBQUNHakIscUJBREg7QUFHRTtBQUFBO0FBQUEsNkNBQU0sT0FBTyxFQUFDa0IsU0FBUyxjQUFWO0FBQ0xDLDZCQUFZLFdBRFAsRUFBYjtBQUVNLDBCQUFXaEIsTUFBTWlCO0FBRnZCLHlCQUdhaEIsTUFIYjtBQUlHRjtBQUpILFlBSEY7QUFVR0Q7QUFWSDtBQUZGLFFBREY7QUFpQkQ7OztHQXZEcUMsZ0JBQU1vQixTOztBQUF6Qm5DLFcsQ0FFWm9DLFMsR0FBWTtBQUNqQnRCLGVBQVksaUJBQVV1QixNQURMO0FBRWpCdEIsY0FBWSxpQkFBVXNCLE1BRkw7QUFHakJyQixlQUFZLGlCQUFVcUIsTUFBVixDQUFpQkMsVUFIWjtBQUlqQnJCLFVBQVksaUJBQVVzQjtBQUpMLEU7bUJBRkF2QyxVIiwiZmlsZSI6IjEuMjg1OTVhMDNjMTYyYmU5MWE1Y2QuaG90LXVwZGF0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBjc3MgZnJvbSAnbmV4dC9jc3MnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1vdmluZ1RleHQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuXG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgYmVmb3JldGV4dDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBhZnRlcnRleHQ6ICBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIG1vdmluZ3RleHQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICBzdHlsZTogICAgICBQcm9wVHlwZXMub2JqZWN0XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKVxuICAgIHRoaXMuaW5pdCgpXG4gIH1cblxuICBpbml0KCkge1xuICAgIHRoaXMuc3RhdGUgPSB7IG1vdXNlUG9zOiB7IHg6IDAsIHk6IDAgfSB9XG4gIH1cblxuICBtb3VzZU1vdmUoZSkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgbW91c2VQb3M6IHtcbiAgICAgICAgeDogZS5wYWdlWCAtICh3aW5kb3cuaW5uZXJXaWR0aCAvIDIpLFxuICAgICAgICB5OiBlLnBhZ2VZIC0gKHdpbmRvdy5pbm5lckhlaWdodCAvIDIpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGJlZm9yZXRleHQsIGFmdGVydGV4dCwgbW92aW5ndGV4dCwgc3R5bGUgfSA9IHRoaXMucHJvcHNcblxuICAgIGxldCBvZmZzZXQgPSB7XG4gICAgICB0cmFuc2Zvcm06IGB0cmFuc2xhdGUzZCggJHt0aGlzLnN0YXRlLm1vdXNlUG9zLnggLyB0aGlzLnByb3BzLnN0eWxlLmFuaW1hdGlvbi50cmFuc2Zvcm1fbW91c2VfcG9zX3h9cHgsXG4gICAgICAgICR7dGhpcy5zdGF0ZS5tb3VzZVBvcy55IC8gdGhpcy5wcm9wcy5zdHlsZS5hbmltYXRpb24udHJhbnNmb3JtX21vdXNlX3Bvc195fXB4LCAwIClgLFxuICAgICAgdGV4dFNoYWRvdzogYCR7LSB0aGlzLnN0YXRlLm1vdXNlUG9zLnggLyB0aGlzLnByb3BzLnN0eWxlLmFuaW1hdGlvbi5zaGFkb3dfbW91c2VfcG9zX3h9cHhcbiAgICAgICAgJHt0aGlzLnN0YXRlLm1vdXNlUG9zLnkgLyB0aGlzLnByb3BzLnN0eWxlLmFuaW1hdGlvbi5zaGFkb3dfbW91c2VfcG9zX3l9cHhcbiAgICAgICAgJHt0aGlzLnByb3BzLnN0eWxlLm1vdmluZ3RpdGxlYmFja2dyb3VuZH1gXG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZS5iYWNrZ3JvdW5kfVxuICAgICAgICAgIG9uTW91c2VNb3ZlPXsgdGhpcy5tb3VzZU1vdmUuYmluZCh0aGlzKSB9ID5cbiAgICAgICAgPGgxIHN0eWxlPXt7d2hpdGVTcGFjZTogJ25vd3JhcCd9fSBjbGFzc05hbWU9e3N0eWxlLmZpeGVkdGl0bGV9PlxuICAgICAgICAgIHtiZWZvcmV0ZXh0fVxuXG4gICAgICAgICAgPHNwYW4gc3R5bGU9e3tkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICAgICAgICAgICAgICAgIHdpbGxDaGFuZ2U6ICd0cmFuc2Zvcm0nfX1cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e3N0eWxlLm1vdmluZ3RpdGxlfVxuICAgICAgICAgICAgICAgIHN0eWxlPXtvZmZzZXR9PlxuICAgICAgICAgICAge21vdmluZ3RleHR9XG4gICAgICAgICAgPC9zcGFuPlxuXG4gICAgICAgICAge2FmdGVydGV4dH1cbiAgICAgICAgPC9oMT5cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vY29tcG9uZW50cy9Nb3ZpbmdUZXh0LmpzIl0sInNvdXJjZVJvb3QiOiIifQ==